// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using NyelvtechBeadandoML.Model;

namespace NyelvtechBeadandoML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\balint\OneDrive\itk\Nyelvtech\beadando\HU\NyelvtechBeadando\NyelvtechBead.Console\bin\Debug\netcoreapp3.1\train.mlnet.sen_w3_12367.tsv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual PARSEME_MWE with predicted PARSEME_MWE from sample data...\n\n");
            Console.WriteLine($"FORMm3: {sampleData.FORMm3}");
            Console.WriteLine($"LEMMAm3: {sampleData.LEMMAm3}");
            Console.WriteLine($"UPOSm3: {sampleData.UPOSm3}");
            Console.WriteLine($"HEADm3: {sampleData.HEADm3}");
            Console.WriteLine($"DEPRELm3: {sampleData.DEPRELm3}");
            Console.WriteLine($"FORMm2: {sampleData.FORMm2}");
            Console.WriteLine($"LEMMAm2: {sampleData.LEMMAm2}");
            Console.WriteLine($"UPOSm2: {sampleData.UPOSm2}");
            Console.WriteLine($"HEADm2: {sampleData.HEADm2}");
            Console.WriteLine($"DEPRELm2: {sampleData.DEPRELm2}");
            Console.WriteLine($"FORMm1: {sampleData.FORMm1}");
            Console.WriteLine($"LEMMAm1: {sampleData.LEMMAm1}");
            Console.WriteLine($"UPOSm1: {sampleData.UPOSm1}");
            Console.WriteLine($"HEADm1: {sampleData.HEADm1}");
            Console.WriteLine($"DEPRELm1: {sampleData.DEPRELm1}");
            Console.WriteLine($"FORM0: {sampleData.FORM0}");
            Console.WriteLine($"LEMMA0: {sampleData.LEMMA0}");
            Console.WriteLine($"UPOS0: {sampleData.UPOS0}");
            Console.WriteLine($"HEAD0: {sampleData.HEAD0}");
            Console.WriteLine($"DEPREL0: {sampleData.DEPREL0}");
            Console.WriteLine($"FORMp1: {sampleData.FORMp1}");
            Console.WriteLine($"LEMMAp1: {sampleData.LEMMAp1}");
            Console.WriteLine($"UPOSp1: {sampleData.UPOSp1}");
            Console.WriteLine($"HEADp1: {sampleData.HEADp1}");
            Console.WriteLine($"DEPRELp1: {sampleData.DEPRELp1}");
            Console.WriteLine($"FORMp2: {sampleData.FORMp2}");
            Console.WriteLine($"LEMMAp2: {sampleData.LEMMAp2}");
            Console.WriteLine($"UPOSp2: {sampleData.UPOSp2}");
            Console.WriteLine($"HEADp2: {sampleData.HEADp2}");
            Console.WriteLine($"DEPRELp2: {sampleData.DEPRELp2}");
            Console.WriteLine($"FORMp3: {sampleData.FORMp3}");
            Console.WriteLine($"LEMMAp3: {sampleData.LEMMAp3}");
            Console.WriteLine($"UPOSp3: {sampleData.UPOSp3}");
            Console.WriteLine($"HEADp3: {sampleData.HEADp3}");
            Console.WriteLine($"DEPRELp3: {sampleData.DEPRELp3}");
            Console.WriteLine($"\n\nActual PARSEME_MWE: {sampleData.PARSEME_MWE} \nPredicted PARSEME_MWE value {predictionResult.Prediction} \nPredicted PARSEME_MWE scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
